Monitor de Rede Multi-Host em C#


üéØ Objetivo
Este projeto √© uma aplica√ß√£o de desktop para Windows, desenvolvida em C#, que serve como uma ferramenta de diagn√≥stico e monitoramento de rede. O objetivo principal √© fornecer uma vis√£o clara e em tempo real da sa√∫de da conex√£o com m√∫ltiplos hosts (servidores, sites, etc.) simultaneamente. A aplica√ß√£o foi inspirada em ferramentas de monitoramento profissionais como o Zabbix, focando em uma interface visual pr√°tica e informativa.

‚ú® Funcionalidades
Monitoramento de 4 Hosts: Permite monitorar at√© quatro hosts ao mesmo tempo.

M√©tricas em Tempo Real: Exibe status (Dispon√≠vel/Indispon√≠vel), endere√ßo IP, lat√™ncia (ping) e jitter, com atualiza√ß√µes a cada 2 segundos.

Gr√°ficos Din√¢micos: Cada host possui gr√°ficos de linha para Lat√™ncia e Disponibilidade, mostrando o hist√≥rico recente da conex√£o.

Alertas Visuais: Notifica√ß√µes pop-up persistentes s√£o exibidas em cascata para eventos de indisponibilidade (vermelho) ou lat√™ncia alta (>150ms) (laranja).

Relat√≥rios Detalhados: Gera relat√≥rios em formato .txt com a op√ß√£o de filtrar por data e hora. O relat√≥rio inclui um log detalhado de cada evento de indisponibilidade e lat√™ncia alta, com dura√ß√£o, in√≠cio e fim.

Interface Responsiva: O layout da aplica√ß√£o se adapta a diferentes tamanhos de tela.

üõ†Ô∏è Tecnologias Utilizadas
Linguagem: C#

Framework: .NET com Windows Forms (WinForms)

Biblioteca de Gr√°ficos: System.Windows.Forms.DataVisualization.Charting

IDE de Desenvolvimento: Visual Studio 2022

Instalador: Microsoft Visual Studio Installer Projects

üß† O Que Eu Aprendi
O desenvolvimento desta aplica√ß√£o foi uma jornada de aprendizado significativa, especialmente na transi√ß√£o de conceitos de outras linguagens (como Java) para o ecossistema .NET.

UI/UX com WinForms: Aprendi que, mesmo sendo um framework mais antigo, √© totalmente poss√≠vel criar interfaces modernas e responsivas com o WinForms. O uso estrat√©gico de TableLayoutPanel foi crucial para garantir a responsividade, e a personaliza√ß√£o de cores e fontes permitiu a cria√ß√£o de um tema escuro agrad√°vel.

Multithreading e Assincronia (async/await): Este foi o maior aprendizado. Manter a interface gr√°fica (UI) responsiva enquanto se realizam opera√ß√µes de rede cont√≠nuas √© um desafio. O uso intensivo de async/await e Task.Run foi essencial para executar os pings e outras tarefas em background. Al√©m disso, compreendi a fundo a necessidade de usar Invoke para atualizar os componentes da UI a partir de outras threads de forma segura.

Gerenciamento de Estado Complexo: Gerenciar o estado de m√∫ltiplos hosts, cada um com seus pr√≥prios eventos (indisponibilidade, lat√™ncia alta), timers e alertas, exigiu uma organiza√ß√£o cuidadosa do c√≥digo. A cria√ß√£o da classe HostMonitor para encapsular toda a l√≥gica de um √∫nico host foi uma decis√£o de design fundamental para manter o c√≥digo limpo e escal√°vel.

Cria√ß√£o de Componentes Customizados: A implementa√ß√£o do sistema de alertas pop-up em cascata n√£o √© uma funcionalidade nativa do WinForms. Tive que criar uma solu√ß√£o customizada usando ToolStripDropDown para simular esse comportamento, o que foi um excelente exerc√≠cio de criatividade e aprofundamento no framework.

Empacotamento e Distribui√ß√£o: A etapa final de criar um instalador .msi com o Visual Studio Installer Projects me deu uma vis√£o pr√°tica do ciclo de vida completo de uma aplica√ß√£o de desktop, desde a concep√ß√£o at√© a distribui√ß√£o para o usu√°rio final.

üöÄ Como Executar
Clone este reposit√≥rio.

Abra a solu√ß√£o (.sln) no Visual Studio 2022.

Adicione o pacote NuGet System.Windows.Forms.DataVisualization ao projeto.

V√° em Tools > NuGet Package Manager > Manage NuGet Packages for Solution...

Procure por System.Windows.Forms.DataVisualization e instale-o.

Pressione F5 ou clique no bot√£o "Start" para compilar e executar a aplica√ß√£o.
